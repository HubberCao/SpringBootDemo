
# mysql
## JDBC 配置
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc:mysql://192.168.1.120:3306/test?characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull
#spring.datasource.username=root
#spring.datasource.password=123456
#
### 连接池配置，参考https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8
#
## 配置初始化大小、最小、最大
#spring.datasource.druid.initial-size=5
#spring.datasource.druid.min-idle=1
#spring.datasource.druid.max-active=10
## 配置获取连接等待超时的时间
#spring.datasource.druid.max-wait=60000
## 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
#spring.datasource.druid.pool-prepared-statements=true
#spring.datasource.druid.max-open-prepared-statements=10
#
## 用来检测连接是否有效的sql，不同的数据配置不同
#spring.datasource.druid.validation-query=select 1
#spring.datasource.druid.test-while-idle=true
## 这里建议配置为TRUE，防止取到的连接不可用
#spring.datasource.druid.test-on-borrow=true
#spring.datasource.druid.test-on-return=false
#
## 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#spring.datasource.druid.time-between-eviction-runs-millis=60000
## 配置连接保持空闲而不被驱逐的最小时间，单位是毫秒
#spring.datasource.druid.min-evictable-idle-time-millis=300000

spring.datasource.ds01.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.ds01.url=jdbc:mysql://192.168.1.120:3306/test?characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull
spring.datasource.ds01.username=root
spring.datasource.ds01.password=123456

spring.datasource.ds02.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.ds02.url=jdbc:mysql://192.168.1.120:3306/test2?characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull
spring.datasource.ds02.username=root
spring.datasource.ds02.password=123456

# 配置初始化大小、最小、最大
spring.datasource.druid.initial-size=5
spring.datasource.druid.min-idle=1
spring.datasource.druid.max-active=10
# 配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-open-prepared-statements=10

# 用来检测连接是否有效的sql，不同的数据配置不同
spring.datasource.druid.validation-query=select 1 
spring.datasource.druid.test-while-idle=true
# 这里建议配置为TRUE，防止取到的连接不可用
spring.datasource.druid.test-on-borrow=true
spring.datasource.druid.test-on-return=false

# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置连接保持空闲而不被驱逐的最小时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=300000

## 连接池配置 end

# mybatis 配置
#mybatis.mapper-locations=classpath:config/mappers/*.xml
#mybatis.config-location=
#mybatis.type-handlers-package=

########################################################################################################################

# kafka
#spring.kafka.bootstrap-servers=192.168.1.121:9092
## 生产者
#spring.kafka.producer.retries=1
#spring.kafka.producer.batch-size=16384
#spring.kafka.producer.buffer-memory=33554432
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.transaction-id-prefix=tx.
#
##  消费者
#spring.kafka.consumer.group-id=consumer-default
#spring.kafka.consumer.auto-commit-interval=100
#spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.consumer.enable-auto-commit=true
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.listener.concurrency=3

########################################################################################################################

# redis 集群参数
spring.redis.cluster.nodes=192.168.1.122:7001,192.168.1.122:7002,192.168.1.122:7003,192.168.1.122:7004,192.168.1.122:7005,192.168.1.122:7006
spring.redis.cluster.max-redirects=3

# 连接超时时间（毫秒）
spring.redis.timeout=10000
# Redis默认情况下有16个分片，这里配置具体使用的分片，默认是0
spring.redis.database=0

# 连接池最大连接数（使用负值表示没有限制） 默认 8
spring.redis.lettuce.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
spring.redis.lettuce.pool.max-wait=-1
# 连接池中的最大空闲连接 默认 8
spring.redis.lettuce.pool.max-idle=8
# 连接池中的最小空闲连接 默认 0
spring.redis.lettuce.pool.min-idle=1
# 可以不用配置
# spring.cache.type=redis

########################################################################################################################

## Elasticsearch配置文件（必须）
## 该配置和Elasticsearch的elasticsearch.yml中的配置信息有关

#spring.data.elasticsearch.cluster-name=docker-cluster
#spring.data.elasticsearch.cluster-nodes=192.168.1.130:9200

# 日志
logging.level.com.sp.dao=info
#logging.path=/git/SpringBootDemo
#logging.file=springbootdemo.log

#热部署生效
spring.devtools.restart.enabled=true
#设置重启的目录
#spring.devtools.restart.additional-paths: src/main/java
# 默认值已包括，可以不设置
#spring.resources.static-locations=/static/

#spring.main.allow-bean-definition-overriding=true

# https
#server.ssl.key-store=classpath:server.keystore
#server.ssl.key-alias=tomcat
#server.ssl.enabled=true
#server.ssl.key-store-type=JKS
#server.ssl.key-store-password=123456

server.port=8888
#server.address=192.168.1.150

# jwt位置
# 加密密钥
config.jwt.secret=abcd
# token 有效时长
config.jwt.expire=3600
# header名称
config.jwt.header=access_token


